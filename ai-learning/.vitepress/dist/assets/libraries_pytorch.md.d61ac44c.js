import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.18d5c1a4.js";const h=JSON.parse('{"title":"PyTorch","description":"","frontmatter":{},"headers":[],"relativePath":"libraries/pytorch.md","filePath":"libraries/pytorch.md"}'),p={name:"libraries/pytorch.md"},o=l(`<h1 id="pytorch" tabindex="-1">PyTorch <a class="header-anchor" href="#pytorch" aria-label="Permalink to &quot;PyTorch&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>未完待续...</p><h2 id="tutorials" tabindex="-1">Tutorials <a class="header-anchor" href="#tutorials" aria-label="Permalink to &quot;Tutorials&quot;">​</a></h2><p>未完待续...</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="torch-max" tabindex="-1">torch.max() <a class="header-anchor" href="#torch-max" aria-label="Permalink to &quot;torch.max()&quot;">​</a></h3><p><code>torch.max()</code>计算张量的最大值，<code>torch.max(input, dim, keepdim=False, out=None) -&gt; (Tensor, LongTensor)</code>，返回最大值和最大值的索引。</p><p>示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> torch</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> torch.randn(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(torch.max(a, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(torch.max(a, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span></code></pre></div><p>输出：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tensor([[</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.4720</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1.2754</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-0.9520,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-0.1086</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">-1.0423</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">-0.0083</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">1.0577</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">-0.5556</span><span style="color:#E1E4E8;">]</span><span style="color:#B392F0;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        [ </span><span style="color:#79B8FF;">0.0219</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">0.8216</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">0.6929</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">-1.2122</span><span style="color:#E1E4E8;">]</span><span style="color:#B392F0;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        [ </span><span style="color:#79B8FF;">0.9698</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">-0.0423</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">0.8109</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">-0.2953</span><span style="color:#E1E4E8;">]])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">torch.return_types.max(</span></span>
<span class="line"><span style="color:#E1E4E8;">values</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">tensor</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1.2754</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0577</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.8216</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.9698</span><span style="color:#E1E4E8;">])</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">indices</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">tensor</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tensor([[</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.4720</span><span style="color:#032F62;">,</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1.2754</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-0.9520,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-0.1086</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">-1.0423</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">-0.0083</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">1.0577</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">-0.5556</span><span style="color:#24292E;">]</span><span style="color:#6F42C1;">,</span></span>
<span class="line"><span style="color:#24292E;">        [ </span><span style="color:#005CC5;">0.0219</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.8216</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.6929</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">-1.2122</span><span style="color:#24292E;">]</span><span style="color:#6F42C1;">,</span></span>
<span class="line"><span style="color:#24292E;">        [ </span><span style="color:#005CC5;">0.9698</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">-0.0423</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.8109</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">-0.2953</span><span style="color:#24292E;">]])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">torch.return_types.max(</span></span>
<span class="line"><span style="color:#24292E;">values</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">tensor</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1.2754</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0577</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8216</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.9698</span><span style="color:#24292E;">])</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">indices</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">tensor</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]))</span></span></code></pre></div><p>其中indices表示最大值的索引，values表示最大值。[1, 2, 1, 0]分别表示第一行最大值出现在 index 为1的位置，第二行最大值出现在 index 为2的位置，第三行最大值出现在 index 为1的位置，第四行最大值出现在 index 为0的位置。</p>`,13),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{h as __pageData,d as default};
